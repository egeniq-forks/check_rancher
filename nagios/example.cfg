# In these examples, we are assuming that the
# $USER1$ holds the plugins directory, and 
# $USER2$ holds the location of the check_rancher config files
# We have one per environment as you cant have a global one.
# The Host, port, SSL, User and Key definitions are kept in the
# config file so as to hide them from the commandline.

# You can set thresholds for the checks in the config file, and by
# using Rancher Tags on the Hosts.

# Feel free to customise the check periods and intervals.

# API test
define command {
    command_name    rancher_api
    command_line    $USER1$/check_rancher -c $USER2$/default.cfg
    }

# Environment test
define command {
    command_name    rancher_env
    command_line    $USER1$/check_rancher -c $USER2$/$ARG1$.cfg -E $ARG1$ -i $ARG2$
    }

# Stack test
define command {
    command_name    rancher_stack
    command_line    $USER1$/check_rancher -c $USER2$/$ARG1$.cfg -E $ARG1$ -s $ARG2$
    }

#############################################
define service {
    use                     generic-service
    service_description     Rancher: API
    check_command           rancher_api
    host_name               rancherhost
    max_check_attempts      2
    normal_check_interval   1
    retry_check_interval    1
}
#############################################
define service {
    use                     generic-service
    service_description     Rancher: myenv: Resources
    check_command           rancher_env!myenv!cpu,mem,swap,load
    host_name               rancherhost
    max_check_attempts      4
    normal_check_interval   5
    retry_check_interval    1
}
define servicedependency{
       host_name                       %SHNAME%
       dependent_host_name             %SHNAME%
       service_description             Rancher: API
       dependent_service_description   Rancher: myenv: Resources
       execution_failure_criteria      u,c
       notification_failure_criteria   u,c
}
define service {
    use                     generic-service
    service_description     Rancher: myenv: Disk
    check_command           rancher_env!myenv!disk
    host_name               rancherhost
    max_check_attempts      2
    normal_check_interval   10
    retry_check_interval    5
}
define servicedependency{
       host_name                       %SHNAME%
       dependent_host_name             %SHNAME%
       service_description             Rancher: API
       dependent_service_description   Rancher: myenv: Disk
       execution_failure_criteria      u,c
       notification_failure_criteria   u,c
}
define service {
    use                     generic-service
    service_description     Rancher: myenv: Certificates
    check_command           rancher_env!myenv!cert
    host_name               rancherhost
    max_check_attempts      2
    normal_check_interval   60
    retry_check_interval    60
}
define servicedependency{
       host_name                       %SHNAME%
       dependent_host_name             %SHNAME%
       service_description             Rancher: API
       dependent_service_description   Rancher: myenv: Certificates
       execution_failure_criteria      u,c
       notification_failure_criteria   u,c
}
#############################################
define service {
    use                     generic-service
    service_description     Rancher: myenv: mystack
    check_command           rancher_stack!myenv!mystack
    host_name               rancherhost
    max_check_attempts      2
    normal_check_interval   5
    retry_check_interval    4
}
define servicedependency{
       host_name                       %SHNAME%
       dependent_host_name             %SHNAME%
       service_description             Rancher: API
       dependent_service_description   Rancher: myenv: mystack
       execution_failure_criteria      u,c
       notification_failure_criteria   u,c
}
#############################################

